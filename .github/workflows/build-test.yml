name: Build test

on:
  push:
    branches: [ workflow-tests ]
  pull_request:
    branches: [ workflow-tests ]
  workflow_dispatch:

jobs:
  create-release: 
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

  publish:
    needs: create-release
    runs-on: ubuntu-latest
    env:
      APP_NAME: famicom-dumper
      PROJECT_PATH: FamicomDumper
      OUTPUT_DIR: output
      CONFIGURATION: Release
    strategy:
      matrix:
        os: [win, linux, osx]
        arch: [x86, x64, arm]
        sc: [no-self-contained, self-contained]
        exclude:
          - os: linux
            arch: x86
          - os: osx
            arch: x86
          - os: osx
            arch: arm          
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Checkout submodules
      uses: textbook/git-checkout-submodule-action@master      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Dump vars if self-contained
      if: ${{ matrix.sc == 'self-contained' }}
      env:
        SC_OPS: --self-contained true -p:PublishTrimmed=True
        SC_NAME: -self-contained
      run: echo sc_name $SC_NAME
    - name: Dump vars if no-self-contained
      if: ${{ matrix.sc == 'no-self-contained' }}
      env:
        SC_OPS: --no-self-contained
      run: echo SC_OPS $SC_OPS
    - name: Build
      run: dotnet publish $PROJECT_PATH -c $CONFIGURATION -r ${{ matrix.os }}-${{ matrix.arch }} -p:PublishSingleFile=true $SC_OPS -p:IncludeAllContentForSelfExtract=true -o $OUTPUT_DIR/${{ matrix.os }}-${{ matrix.arch }}$SC_NAME/$APP_NAME
    - name: Archive to .tar.gz
      if: ${{ matrix.os != 'win' }}
      env:
        OUTPUT_FILE: famicom-dumper-${{ matrix.os }}-${{ matrix.arch }}$SC_NAME.tar.gz
      run: |
        cd $OUTPUT_DIR/${{ matrix.os }}-${{ matrix.arch }}$SC_NAME
        tar -czvf ../../$OUTPUT_FILE $APP_NAME
    - name: Archive to .zip
      if: ${{ matrix.os == 'win' }}
      env:
        OUTPUT_FILE: famicom-dumper-${{ matrix.os }}-${{ matrix.arch }}$SC_NAME.zip
      run: |
        cd $OUTPUT_DIR/${{ matrix.os }}-${{ matrix.arch }}$SC_NAME
        zip -r9 ../../$OUTPUT_FILE $APP_NAME
    - name: Upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ jobs.create-release.steps.create_release.outputs.upload_url }}
        asset_path: $OUTPUT_FILE
        asset_name: $OUTPUT_FILE
        asset_content_type: application/zip
